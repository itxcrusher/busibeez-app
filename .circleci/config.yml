version: 2.1

executors:
  docker-executor:
    docker:
      - image: docker:20.10
    environment:
      DOCKER_DRIVER: overlay2
      DOCKER_TLS_CERTDIR: ""

jobs:
  detect-changes:
    docker:
      - image: alpine/git
    steps:
      - checkout
      - run:
          name: Detect Changed Services
          command: |
            git fetch --depth=50 origin $CIRCLE_BRANCH
            CHANGED_FILES=$(git diff --name-only origin/$CIRCLE_BRANCH...HEAD)

            echo "Detecting changed APIs..."
            echo "$CHANGED_FILES" | grep -oE '^API/[^/]+' | sort -u | cut -d'/' -f2 > changed_apis.txt || true

            echo "Detecting changed JOBS..."
            echo "$CHANGED_FILES" | grep -oE '^JOBS/[^/]+' | sort -u | cut -d'/' -f2 > changed_jobs.txt || true

            echo "Detecting changed SOCKETS..."
            echo "$CHANGED_FILES" | grep -oE '^SOCKETS/[^/]+' | sort -u | cut -d'/' -f2 > changed_sockets.txt || true

            echo "✅ Detected changes stored in txt files."

      - persist_to_workspace:
          root: .
          paths:
            - changed_apis.txt
            - changed_jobs.txt
            - changed_sockets.txt

  build-and-push-api:
    executor: docker-executor
    parameters:
      service_name:
        type: string
      service_path:
        type: string
      service_type:
        type: string # api, jobs, or sockets
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check for Changes in << parameters.service_name >>
          command: |
            FILE="changed_<< parameters.service_type >>.txt"
            if grep -q "^<< parameters.service_name >>$" $FILE; then
              echo "✅ << parameters.service_name >> changed, proceeding..."
            else
              echo "⏭️ No changes detected in << parameters.service_name >>, skipping build."
              circleci step halt
            fi
      - setup_remote_docker
      - run:
          name: "Login to GitLab Registry"
          command: docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      - run:
          name: "Build & Push << parameters.service_name >> Image"
          command: |
            IMAGE_NAME="$CI_REGISTRY_IMAGE/$(echo "<< parameters.service_name >>" | tr '[:upper:]' '[:lower:]')"
            TAG=$(echo "$CIRCLE_SHA1" | cut -c1-7)
            echo "Building $IMAGE_NAME:$TAG ..."
            docker build -t $IMAGE_NAME:$TAG << parameters.service_path >>
            docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$TAG
            docker push $IMAGE_NAME:latest
            
      # - run:
      #     name: DockerHub Login
      #     command: |
      #       echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
      # - run:
      #     name: Build & Push << parameters.service_name >> Image
      #     command: |
      #       IMAGE_NAME="dockerhubusername/<< parameters.service_name >>"
      #       ENV_TAG=$(echo $CIRCLE_BRANCH | sed 's/main/prod/')

      #       docker build -t $IMAGE_NAME:$ENV_TAG << parameters.service_path >>
      #       docker push $IMAGE_NAME:$ENV_TAG

      #       echo "✅ Built & pushed: $IMAGE_NAME:$ENV_TAG"

workflows:
  build-and-push-changed-services:
    jobs:
      - detect-changes:
          filters:
            branches:
              only:
                - dev
                - test
                - main
      - build-and-push-api:
          requires: [detect-changes]
          matrix:
            parameters:
              service_name:
                - App
                # - BeeKeeper
                # - Chat
                # - CreLi
                # - Followers
                # - MakeADeal
                # - Management
                # - Notification
                # - Public
                # - Support
              service_path:
                - ./API/App
                # - ./API/BeeKeeper
                # - ./API/Chat
                # - ./API/CreLi
                # - ./API/Followers
                # - ./API/MakeADeal
                # - ./API/Management
                # - ./API/Notification
                # - ./API/Public
                # - ./API/Support
              service_type: ["apis"]
          filters:
            branches:
              only: [dev, test, main]

      # - build-and-push-api:
      #     requires: [detect-changes]
      #     matrix:
      #       parameters:
      #         service_name:
      #           - Promotions
      #         service_path:
      #           - ./JOBS/Promotions
      #         service_type: ["jobs"]
      #     filters:
      #       branches:
      #         only: [dev, test, main]

      # - build-and-push-api:
      #     requires: [detect-changes]
      #     matrix:
      #       parameters:
      #         service_name:
      #           - chat
      #           - makeadeal
      #           - notification
      #           - support
      #         service_path:
      #           - ./SOCKETS/chat
      #           - ./SOCKETS/makeadeal
      #           - ./SOCKETS/notification
      #           - ./SOCKETS/support
      #         service_type: ["sockets"]
      #     filters:
      #       branches:
      #         only: [dev, test, main]